#!/bin/sh /etc/rc.common
set -e

### BEGIN INIT INFO
# Provides:           docker
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Should-Start:       cgroupfs-mount cgroup-lite
# Should-Stop:        cgroupfs-mount cgroup-lite
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Create lightweight, portable, self-sufficient containers.
# Description:
#  Docker is an open-source project to easily create lightweight, portable,
#  self-sufficient containers from any application. The same container that a
#  developer builds and tests on a laptop can run at scale, in production, on
#  VMs, bare metal, OpenStack clusters, public clouds and more.
### END INIT INFO

START=90
STOP=60

#export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

BASE=docker

# modify these in /etc/default/$BASE (/etc/default/docker)
DOCKERD=/usr/bin/dockerd
# This is the pid file managed by docker itself
DOCKER_PIDFILE=/var/run/$BASE.pid
# This is the pid file created/managed by start-stop-daemon
DOCKER_SSD_PIDFILE=/var/run/$BASE-ssd.pid
DOCKER_LOGFILE=/var/log/$BASE.log
DOCKER_OPTS=
#DOCKER_OPTS='--insecure-registry 191.168.1.191:5000'
DOCKER_DESC="Docker"



start()
{
	# Get lsb functions
	. /lib/lsb/init-functions

	# Check docker is present
	if [ ! -x $DOCKERD ]; then
		log_failure_msg "$DOCKERD not present or not executable"
		exit 1
	fi

	touch "$DOCKER_LOGFILE"
	chgrp docker "$DOCKER_LOGFILE"

	ulimit -n 1048576

	# Having non-zero limits causes performance problems due to accounting overhead
	# in the kernel. We recommend using cgroups to do container-local accounting.
	if [ "$BASH" ]; then
		ulimit -u unlimited
	else
		ulimit -p unlimited
	fi

	log_begin_msg "Starting $DOCKER_DESC: $BASE"
	start-stop-daemon -b -m -p $DOCKER_SSD_PIDFILE \
		-S -x $DOCKERD \
		-- $DOCKER_OPTS >> "$DOCKER_LOGFILE" 2>&1
	log_end_msg $?
}


stop()
{
	# Get lsb functions
	. /lib/lsb/init-functions

	if [ -f "$DOCKER_SSD_PIDFILE" ]; then
		log_begin_msg "Stopping $DOCKER_DESC: $BASE"
		start-stop-daemon -p "$DOCKER_SSD_PIDFILE" -K
		log_end_msg $?
	else
		log_warning_msg "Docker already stopped - file $DOCKER_SSD_PIDFILE not found."
	fi
}

restart()
{
	docker_pid=`cat "$DOCKER_SSD_PIDFILE" 2>/dev/null`
	[ -n "$docker_pid" ] \
		&& ps -p $docker_pid > /dev/null 2>&1 \
		&& $0 stop
	$0 start
}

status()
{
	status_of_proc -p "$DOCKER_SSD_PIDFILE" "$DOCKERD" "$DOCKER_DESC"
}
