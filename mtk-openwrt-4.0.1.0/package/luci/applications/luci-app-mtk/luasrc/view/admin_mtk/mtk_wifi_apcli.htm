
<%+header%>
<!--
    This module is a demo to configure MTK' proprietary WiFi driver.
    Basic idea is to bypass uci and edit wireless profile (mt76xx.dat) directly.
    LuCI's WiFi configuration is more logical and elegent, but it's quite tricky to 
    translate uci into MTK's WiFi profile (like we did in "uci2dat").

    Hua Shao <nossiac@163.com>
-->
<%
local disp = require "luci.dispatcher"
-- local request  = disp.context.path
local request = disp.context.request
local mtkwifi = require("mtkwifi")
--local devname = string.match(request[5], "(mt.+)%.")
local devname = request[5]
local devs = mtkwifi.get_all_devs()
local dev = {}
local vif = {}
local vifidx
for _,v in ipairs(devs) do
    if v.devname == devname then
        dev = v
    end
end

local vifname = request[6] or dev.apcli.vifname
assert(vifname)
vif = dev and dev.vifs[vifname] or nil
vifidx = vif and vif.vifidx or nil
--print(devs, dev, dev.apcli, devname, vifname)

local cfgs = mtkwifi.load_profile(dev.profile)
local debug = 0
%>



<script type="text/javascript" src="<%=resource%>/cbi.js?v=git-17.250.41546-90ac861"></script>
<script type="text/javascript">

var intervalId = "";
var waiting_count = 0;
var wps_status_interval = 1500;
function hi(to, devname, vifname)
{
    var a;
    var x;
    var tables = new Array();
    tables.push("vif-cfg-apcli");
    tables.push("vif-cfg-apcli-config");
    tables.push("vif-cfg-WPS");
    tables.push("apcli_form_buttons");

    var tabs = new Array();
    tabs.push("vif-cfg-tab-apcli");
    tabs.push("vif-cfg-tab-WPS");

    document.getElementById("__activeTab").value = to;
    for (x in tables)
    {
        a = document.getElementById(tables[x]);
        if (tables[x].indexOf(to) == -1)
        {
            a.style.display = "none";
        }
        else
        {
            a.style.display = "";
        }
    }
    for (y in tabs)
    {
        a = document.getElementById(tabs[y]);
        if(tabs[y].indexOf(to) == -1)
        {
            a.className = "cbi-tab-disabled";
        }
        else
        {
            a.className = "cbi-tab";
        }
    }

    if(to == "WPS")
    {
        apcli_wps_get_pincode(vifname);
    }
}

</script>

<form method="post" name="cbi" action="<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "apcli_cfg", devname, vifname)%>" enctype="multipart/form-data" onreset="return cbi_validate_reset(this)" onsubmit="return cbi_validate_form(this, 'Some fields are invalid, cannot save values!')" autocomplete="off">
    <fieldset class="cbi-section">
        <legend>ApCli Configurations - <%=vifname and devname.."@"..vifname or devname%>
            <%local diff = mtkwifi.diff_profile(dev.profile)%>
            <%if next(diff) ~= nil then%>
                <span style="color:red;">(<a href="javascript:location.href='<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "reload", devname)%>'">reload</a> to apply changes)</span>
            <%end%>
        </legend>
        <ul class="cbi-tabmenu">
            <li class="cbi-tab" id="vif-cfg-tab-apcli">
                <a href="javascript:hi('apcli', <%="'"..devname.."', '"..vifname.."'"%>);this.blur(); ">AP Client</a>
            </li>
            <li class="cbi-tab-disabled" id="vif-cfg-tab-WPS">
                <a href="javascript:hi('WPS', <%="'"..devname.."', '"..vifname.."'"%>);this.blur(); ">APCli WPS</a>
            </li>
        </ul>
        <input type="hidden" name="__activeTab" id="__activeTab" value="apcli">
        <input type="hidden" name="pin_ap_ssid" id="pin_ap_ssid" value="">

        <fieldset class="cbi-section" id="vif-cfg-apcli">
            <legend> <a name="apcli_scan_section">Available Wireless Networks</a></legend>
            <pre style="display:none;">Help:
            iwpriv apcli0 set ApCliEnable=0              //关闭ApCli0
            iwpriv apcli0 set ApCliAuthMode=             //ApCli0 认证方式
            iwpriv apcli0 set ApCliEncrypType=           //ApCli0 加密方法
            iwpriv apcli0 set ApCliWPAPSK=               //ApCli0 PSK
            #iwpriv apcli0 set ApCliDefaultKeyID=        //WEP加密key id(1,2,3,4)
            #iwpriv apcli0 set ApCliKey1=                //WEP加密密钥
            iwpriv apcli0 set ApCliWirelessMode=         //ApCli0 WirelessMode
            iwpriv apcli0 set ApCliSsid=                 //ApCli0 对应的RootAP的SSID
            iwpriv apcli0 set ApCliEnable=1              //打开ApCLi0</pre>
            <br>
            <p class="left">
                <input id="scan" type="button" class="cbi-button cbi-button-find" onclick="get_ap_list('<%=vifname%>')" value="Scan Wireless Network"/>
            </p>
            <div id="loading" style="display:none;">
            <img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" style="vertical-align:middle;" />
                &nbsp;&nbsp;&nbsp; Please waiting while the page is loading......
            </div>
            <div id="aplist">
            <!--
                <table>
                    <tr>
                        <th>SSID</th>
                        <th>SSID Length</th>
                        <th>Channel</th>
                        <th>BSSID</th>
                        <th>AuthMode</th>
                        <th>RSSI</th>
                    </tr>
                </table>
            -->
            </div>
        </fieldset>
        <fieldset class="cbi-section" id="vif-cfg-apcli-config">
            <legend> <a name="apcli_cfg_section"> Connection Configurations</a> </legend>
            <table class="cbi-section-table">
                <tbody>
                <tr><th class="th1"></th><th></th><th></th></tr>
                <!--
                <tr>
                    <td>Enable AP+Client Mode</td>
                    <td>
                        <input type="radio" name="ApCliEnable" value="1" <% if cfgs.ApCliEnable == "1" then %> checked="checked"<% end %> onclick="toggle_apcli(true)"/> Enable
                        <input type="radio" name="ApCliEnable" value="0" <% if cfgs.ApCliEnable ~= "1" then %> checked="checked"<% end %> onclick="toggle_apcli(false)"/> Disable
                    </td>
                    <td></td>
                </tr>
                </tbody>
                <tbody id="apcli_cfg">
                <!--
                <tr>
                    <td>Connection Status</td>
                    <td>
                        Connected
                    </td>
                    <td></td>
                </tr>
            -->

                    <tr>
                        <td>ApClient Mode</td>
                        <td>
                            <input type="radio" name="ApCliEnable" value="1" <% if cfgs.ApCliEnable == "1" then %> checked="checked"<% end %> onclick="toggle_apcli(true)"/> Enable
                            <input type="radio" name="ApCliEnable" value="0" <% if cfgs.ApCliEnable ~= "1" then %> checked="checked"<% end %> onclick="toggle_apcli(false)"/> Disable
                        </td>
                        <td></td>
                    </tr>
                    <tbody id="apcli_cfg" <% if cfgs.ApCliEnable ~= "1" then %> style="display: none;"<% end %>>
                        <tr>
                            <td>MAC Repeater Mode</td>
                            <td>
                                <input type="radio" name="MACRepeaterEn" value="1" <% if cfgs.MACRepeaterEn == "1" then %> checked="checked"<% end %>/> Enable
                                <input type="radio" name="MACRepeaterEn" value="0" <% if cfgs.MACRepeaterEn ~= "1" then %> checked="checked"<% end %>/> Disable
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>Root AP SSID</td>
                            <td>
                                <input type="text" name="ApCliSsid" id="ApCliSsid" value="<%=cfgs.ApCliSsid and cfgs.ApCliSsid:gsub("\"","&quot;") or nil%>"/>
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>Root AP Channel</td>
                            <td>
                                <input type="text" name="Channel" id="Channel" value="<%=dev.Channel%>"/>
                            </td>
                            <td> <span style="color:red;">This will overwrite ap channel.</span></td>
                        </tr>
                        <tr>
                            <td>Root AP Authentication Mode</td>
                            <td>
                                <select name="ApCliAuthMode" cfg="ApCliAuthMode" id="ApCliAuthMode" onchange="ApCliAuthMode_onchange(this.options[this.options.selectedIndex].value)">
                                    <% for _,v in ipairs(dev.ApCliAuthModeList) do %>
                                        <% if (cfgs.ApCliAuthMode == "OPEN" and cfgs.ApCliEncrypType== "NONE") then
                                            if(v == "Disable") then %>
                                                <option value="<%=v%>" selected="selected" ><%=v%>
                                                </option>
                                            <% else %>
                                                <option value="<%=v%>" ><%=v%>
                                                </option>
                                            <% end
                                        else %>
                                    <option value="<%=v%>" <% if cfgs.ApCliAuthMode==v then %>selected="selected" <% end %>><%=v%>
                                    </option>
                                    <% end %>
                                    <% end %>
                                </select>
                            </td>
                            <td></td>
                        </tr>
                    </tbody>
                </tbody>
                <tbody id="apcli_wpa"<% if cfgs.ApCliAuthMode ~= "WPA2PSK" then %> style="display: none;"<% end %>>
                <tr>
                    <td>Root AP Encryption</td>
                    <td>
                        <select name="wpa_ApCliEncrypType" id="wpa_ApCliEncrypType" >
                        <% for _, v in ipairs(dev.WPA_Enc_List) do %>
                            <option value="<%=v%>" <% if cfgs.ApCliEncrypType==v then %>selected="selected" <% end %>><%=v%>
                            </option>
                        <% end %>
                        </select>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>Root AP WPA Key</td>
                    <td>
                        <input type="text" name="ApCliWPAPSK" id="ApCliWPAPSK" value="<%=cfgs.ApCliWPAPSK%>"/>
                    </td>
                    <td></td>
                </tr>
                </tbody>
                <tbody id="apcli_wep"<% if cfgs.ApCliAuthMode ~= "WEP" then %> style="display: none;"<% end %>>
                <tr>
                    <td>Root AP Encryption</td>
                    <td>
                        <select name="wep_ApCliEncrypType" id="wep_ApCliEncrypType" >
                        <% for _, v in ipairs(dev.WEP_Enc_List) do %>
                            <option value="<%=v%>" <% if cfgs.ApCliEncrypType==v then %>selected="selected" <% end %>><%=v%>
                            </option>
                        <% end %>
                        </select>
                    </td>
                    <td></td>
                </tr>

                <tr>
                    <td>WEP Default Key</td>
                    <td>
                        <select name="ApCliDefaultKeyID" id="ApCliDefaultKeyID">
                            <option value="1" <%if tonumber(cfgs.ApCliDefaultKeyID) == 1 then%>selected="selected"<%end%>>1</option>
                            <option value="2" <%if tonumber(cfgs.ApCliDefaultKeyID) == 2 then%>selected="selected"<%end%>>2</option>
                            <option value="3" <%if tonumber(cfgs.ApCliDefaultKeyID) == 3 then%>selected="selected"<%end%>>3</option>
                            <option value="4" <%if tonumber(cfgs.ApCliDefaultKeyID) == 4 then%>selected="selected"<%end%>>4</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>Root AP WEP Key 1</td>
                    <td>
                        <input type="text" name="ApCliKey1Str" id="ApCliKey1Str" value="<%=cfgs.ApCliKey1Str%>" maxlength="26"/>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>WEP Key 1 Type</td>
                    <td>
                        <select id="ApCliKey1Type" name="ApCliKey1Type">
                        <option value="1" <%if tonumber(cfgs.ApCliKey1Type) == 1 then %> selected="selected"<%end%>>ASCII</option>
                        <option value="0" <%if tonumber(cfgs.ApCliKey1Type) == 0 then %> selected="selected"<%end%>>Hex</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>Root AP WEP Key 2</td>
                    <td>
                        <input type="text" name="ApCliKey2Str" id="ApCliKey2Str" value="<%=cfgs.ApCliKey2Str%>" maxlength="26"/>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>WEP Key 2 Type</td>
                    <td>
                        <select id="ApCliKey2Type" name="ApCliKey2Type">
                        <option value="1" <%if tonumber(cfgs.ApCliKey2Type) == 1 then %> selected="selected"<%end%>>ASCII</option>
                        <option value="0" <%if tonumber(cfgs.ApCliKey2Type) == 0 then %> selected="selected"<%end%>>Hex</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>Root AP WEP Key 3</td>
                    <td>
                        <input type="text" name="ApCliKey3Str" id="ApCliKey3Str" value="<%=cfgs.ApCliKey3Str%>" maxlength="26"/>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>WEP Key 3 Type</td>
                    <td>
                        <select id="ApCliKey3Type" name="ApCliKey3Type">
                        <option value="1" <%if tonumber(cfgs.ApCliKey3Type) == 1 then %> selected="selected"<%end%>>ASCII</option>
                        <option value="0" <%if tonumber(cfgs.ApCliKey3Type) == 0 then %> selected="selected"<%end%>>Hex</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td>Root AP WEP Key 4</td>
                    <td>
                        <input type="text" name="ApCliKey4Str" id="ApCliKey4Str" value="<%=cfgs.ApCliKey4Str%>" maxlength="26"/>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>WEP Key 4 Type</td>
                    <td>
                        <select id="ApCliKey4Type" name="ApCliKey4Type">
                        <option value="1" <%if tonumber(cfgs.ApCliKey4Type) == 1 then %> selected="selected"<%end%>>ASCII</option>
                        <option value="0" <%if tonumber(cfgs.ApCliKey4Type) == 0 then %> selected="selected"<%end%>>Hex</option>
                        </select>
                    </td>
                </tr>
                </tbody>
            </table>
        </fieldset>

        <% if false then %>
        <fieldset class="cbi-section">
            <legend> <a name="apcli_scan_section">Mediatek Adaptive Network</a></legend>
            <p><b>M.A.N. provides a simple and efficient way of building extensible wireless network.</b></p>
            <table class="cbi-section-table">
                <tbody>
                <tr><th class="th1"></th><th></th><th></th></tr>
                <tr>
                    <td>Enable M.A.N. Easy-Setup</td>
                    <td>
                        <input type="radio" name="ApCliEzEnable" value="1" <% if cfgs.ApCliEzEnable == "1" then %> checked="checked"<% end %> onclick="document.getElementById('ezsetup').style.display=''" autocomplete="off"/> Enable
                        <input type="radio" name="ApCliEzEnable" value="0" <% if cfgs.ApCliEzEnable ~= "1" then %> checked="checked"<% end %> onclick="document.getElementById('ezsetup').style.display='none'" autocomplete="off"/> Disable
                    </td>
                    <td>EzEnable &amp; ApCliEzEnable</td>
                </tr>
                </tbody>
                <tbody id="ezsetup" style="display:none;">
                <tr>
                    <td>Configured Status</td>
                    <td>
                        <input type="radio" name="ApCliEzConfStatus" value="2" <% if cfgs.ApCliEzConfStatus == "2" then %> checked="checked"<% end %> autocomplete="off"/> Configured
                        <input type="radio" name="ApCliEzConfStatus" value="1" <% if cfgs.ApCliEzConfStatus ~= "2" then %> checked="checked"<% end %> autocomplete="off"/> Not Configured
                    </td>
                    <td>EzConfStatus &amp; ApCliEzConfStatus</td>
                </tr>
                <tr>
                    <td>Group ID Method</td>
                    <td>
                        <select name="__group_id_mode" onchange="GroupIDMode_onchange(this.options[this.options.selectedIndex].value)" autocomplete="off">
                            <option value="0" <% if cfgs.ApCliEzGenGroupID=="" then %>selected="selected" <% end %>>
                                Fixed Group ID
                            </option>
                            <option value="1" <% if cfgs.ApCliEzGenGroupID~="" then %>selected="selected" <% end %>>
                                Generate Group ID by Seed
                            </option>
                        </select>
                    </td>
                    <td></td>
                </tr>
                <tr id="ApCliEzGroupID" style="display:none;">
                    <td>Group ID</td>
                    <td>
                        <input type="text" name="ApCliEzGroupID" value="<%=cfgs.ApCliEzGroupID%>" autocomplete="off"/>
                    </td>
                    <td>EzGroupID &amp; ApCliEzGroupID</td>
                </tr>
                <tr id="ApCliEzGenGroupID" style="display:none;">
                    <td>Group ID Seed</td>
                    <td>
                        <input type="text" name="ApCliEzGenGroupID" value="<%=cfgs.ApCliEzGenGroupID%>" autocomplete="off"/>
                    </td>
                    <td>EzGenGroupID &amp; ApCliEzGenGroupID</td>
                </tr>
                <tr>
                    <td>Network ID</td>
                    <td>
                        <input type="text" name="ApCliEzOpenGroupID" value="<%=cfgs.ApCliEzOpenGroupID%>" autocomplete="off"/>
                    </td>
                    <td>EzOpenGroupID &amp; ApCliEzOpenGroupID</td>
                </tr>
                <tr>
                    <td>Mixed WDS</td>
                    <td>
                        <input type="radio" name="ApCliMWDS" value="1" <% if cfgs.ApCliMWDS == "1" then %> checked="checked"<% end %>  autocomplete="off"/> Enable
                        <input type="radio" name="ApCliMWDS" value="0" <% if cfgs.ApCliMWDS ~= "1" then %> checked="checked"<% end %>  autocomplete="off"/> Disable
                    </td>
                    <td>ApMWDS &amp; ApCliMWDS</td>
                </tr>
                </tbody>
            </table>
        </fieldset>
        <fieldset class="cbi-section">
            <legend> <a name="apcli_scan_section">M.A.N Push</a></legend>
            <p><b>This is an add-on to M.A.N. which can share upstream profile between M.A.N. partners.</b></p>

            <table class="cbi-section-table">
                <tbody>
                <tr><th class="th1"></th><th></th><th></th></tr>
                <tr>
                    <td>M.A.N. Root AP SSID</td>
                    <td>
                        <input type="text" name="__man_ssid_<%=vifname%>" id="__man_ssid_<%=vifname%>" value="<%=dev.apcli.man_ssid%>"/>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>M.A.N. Root AP Password</td>
                    <td>
                        <input type="password" name="__man_pass_<%=vifname%>" id="__man_pass_<%=vifname%>" value="<%=dev.apcli.man_pass%>"/>
                    </td>
                    <td> <span style="color:red;"></span></td>
                </tr>
                <!--
                <tr>
                    <td>M.A.N. Root AP Auth Mode</td>
                    <td>
                        <input type="text" name="__man_auth_<%=vifname%>" id="__man_auth_<%=vifname%>" value="<%=dev.apcli.man_auth%>"/>
                    </td>
                    <td> <span style="color:red;"></span></td>
                </tr>
                -->
                </tbody>
            </table>
        </fieldset>
        <% end %>

        <fieldset id="vif-cfg-WPS" name="vif-cfg-WPS" style="display:none">
            <table class="cbi-section-table">
                <tbody>
                    <table class="cbi-section-table">
                        <tbody>
                            <legend> <a name="apcli_wps_section">WPS Config</a></legend>
                            <tr id="div_wps_conf_mode_tr">
                                <td class="head">WPS Role:
                                </td>
                                <td>
                                    <select name="wps_conf_mode" id="wps_conf_mode" >
                                        <option value="enr" selected>Enrollee</option>
                                    </select>
                                </td>
                            </tr>
                            <tr id="div_wps_pin">
                                <td class="head">AP Client PIN:
                                </td>
                                <td>
                                    <input name="pin_code" id="pin_code" value="123456" size="10" maxLength="9" readonly="1">
                                </td>
                            </tr>
                            <tr id="div_wps_pin_action">
                                <td class="head">PIN Action:
                                </td>
                                <td>
                                    <input type="button" class="cbi-button cbi-button-apply" value="Random New PINCode" id="gen_pin" name="gen_pin" onClick="on_gen_pincode_start('<%=vifname%>')">
                            <!-- Future use
                                <br><hr>
                                <input type="button" value="Set Vendor PINCode" id="set_pin" name="set_pin" onClick="apcli_wps_set_pincode(this.form.WPSEnable.value)">-->
                                </td>
                            </tr>
                            <tr>
                                <td class="head" id="wps_mode_txt">WPS Mode</td>
                                <td>
                                    <input name="wps_mode" id="wps_mode_pin" value="pin" type="radio" checked onClick="on_wps_mode_change(this.value)"><font id="wps_mode_pin_txt">PIN &nbsp;</font>
                                    <input name="wps_mode" id="wps_mode_pbc" value="pbc" type="radio" onClick="on_wps_mode_change(this.value)"><font id="wps_mode_pbc_txt">PBC &nbsp;</font>
                                </td>
                            </tr>
                            <tr>
                                <td class="head">WPS Scan</td>
                                <td>
                                    <input type="button" class="cbi-button cbi-button-find" value="Start Scan" onClick="on_rescan_start('WPS', '<%=vifname%>', '<%=devname%>')">
                                </td>
                            </tr>
                            <tr>
                                <td colspan=2>
                                    <div id="loadingbar" style="display:none;">
                                        <img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" style="vertical-align:middle;" />
                                        &nbsp;&nbsp;&nbsp; Please wait while request is processed......
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <table id="root_ap_table" class="cbi-section-table">
                        <tbody>
                            <legend> <a name="apcli_wps_section" id="apcli_wps_section">Root AP Info</a></legend>
                            <tr id="div_root_ap_ssid_tr">
                                <td class="head">Root AP SSID</td>
                                <td><input name="root_ap_ssid" id="root_ap_ssid" size=20 maxlength=32 value=""></td>
                            </tr>
                            <tr id="div_root_ap_mac_tr">
                                <td class="head">Root AP MAC Address (Optional)</td>
                                <td><input name="pin_ap_bssid" id="pin_ap_bssid" size=20 maxlength=17 value=""></td>
                            </tr>
                        </tbody>
                    </table>
                    <% if(debug == 1) then %>
                    <table class="cbi-section-table">
                        <tbody>
                            <legend> <a name="apcli_wps_section">WPS Additional Actions</a></legend>
                            <tr id="div_addition_action">
                                <td class="head">Other Action:</td>
                                <td>
                                    <input type="button" class="cbi-button cbi-button-apply" name="additional_func" value="Get PINCode" onClick="on_get_pincode_start('<%=vifname%>')">
                                    <input type="button" class="cbi-button cbi-button-apply" name="additional_func" value="Get Status&Profile" onClick="apcli_get_wps_status('<%=vifname%>', '<%=devname%>')">
                                    <br><hr>
                                    <input type="button" class="cbi-button cbi-button-apply" style="{width:120px;}" value="SCAN" onClick="on_rescan_start('ALL', '<%=vifname%>');">
                                    <input type="button" class="cbi-button cbi-button-apply" name="additional_func" value="updateWPS" onClick="updateWPS()">
                                    <input type="button" class="cbi-button cbi-button-apply" style="{width:120px;}" value="test_encode" onClick="ssid_encode_test(this.form.pin_ap_ssid.value)">
                                    <br><hr>
                                    <input type="button" class="cbi-button cbi-button-apply" style="{width:120px;}" value="Waiting" onClick="show_waiting('ON')">
                                    <input type="button" class="cbi-button cbi-button-apply" style="{width:120px;}" value="Not waiting" onClick="show_waiting('OFF')">
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <% end %>
                    <table id="div_wps_info" name="div_wps_info" class="cbi-section-table" style="visibility: visible;">
                        <legend> <a name="apcli_wps_section">WPS Status</a></legend>
                        <tbody>
                            <tr><td colspan="2">
                                <textarea name="wps_info" id="wps_info" cols="100" rows="4" wrap="off" readonly="1"></textarea>
                            </td></tr>
                        </tbody>
                    </table>
                    <!-- =============================== AP List ================================== -->
                    <table name="aplist" class="cbi-section-table" id="aplist-site-survey" width="600" border="1" cellpadding="2" cellspacing="1">
                        <legend> <a name="wps_section_site_survey">Site Survey</a></legend>
                        <tr>
                            <td class="head" style="width:6%">No</td>
                            <td class="head" style="width:6%">Ch</td>
                            <td class="head">SSID</td>
                            <td class="head">SSID Length</td>
                            <td class="head">BSSID</td>
                            <td class="head">Security</td>
                            <td class="head">Signal(%)</td>
                            <td class="head">W-Mode</td>
                            <td class="head">ExtCh</td>
                            <td class="head">NT</td>
                            <td class="head">WPS</td>
                        </tr>
                    </table>
                    <!-- =============================== Waiting info ================================== -->
                    <tr id="div_wps_action" class="cbi-page-actions">
                        <td colspan=2>
                            <div class="cbi-page-actions" id="wps_form_buttons">
                                <input type="button" class="cbi-button cbi-button-apply" name="apcli_wps_start" value="WPS Start" onClick="on_apcli_wps_start(this.form.wps_conf_mode.value, '<%=vifname%>', '<%=devname%>')">
                                <input type="button" class="cbi-button cbi-button-reset" value="Cancel" onClick="on_apcli_wps_cancel_start('<%=vifname%>', '<%=devname%>')">
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </fieldset>

        <div class="cbi-page-actions" id="apcli_form_buttons">
            <input class="cbi-button cbi-button-apply" name="__apply" value="Save and Apply" type="submit">
            <input class="cbi-button cbi-button-apply" value="Save" type="submit">
            <input class="cbi-button cbi-button-reset" value="Reset" type="reset">
        </div>
    </fieldset>
</form>



<script type="text/javascript">

    var ap_list;
    function create_ap_table (aplist) {
        var table = document.createElement('table');
        table.setAttribute("id", "aplist_table");
        for (i in aplist) {
            var tr = table.insertRow(i);
            var td0 = tr.insertCell(0);
            td0.innerHTML = aplist[i].ssid;
            var td1 = tr.insertCell(1);
            td1.innerHTML = aplist[i].ssid_len;
            var td2 = tr.insertCell(2);
            td2.innerHTML = aplist[i].channel;
            var td3 = tr.insertCell(3);
            td3.innerHTML = aplist[i].bssid;
            var td4 = tr.insertCell(4);
            td4.innerHTML = aplist[i].security;
            var td5 = tr.insertCell(5);
            td5.innerHTML = aplist[i].rssi;
            var td6 = tr.insertCell(6);
            if (aplist[i].authmode == "OPEN"
             || aplist[i].authmode == "WPAPSK"
             || aplist[i].authmode == "WPA2PSK"
             || aplist[i].authmode == "WPAPSKWPA2PSK") {
                td6.innerHTML = '<a href="javascript:choose_rootap(\''+i+'\')" >Choose This</a>';

            } else {
                td6.innerHTML = 'Security Not Supported';
            }
        }

        var tr = table.insertRow(0);
        var td0 = tr.insertCell(0);
        td0.innerHTML = '<strong>SSID</strong>';
        var td1 = tr.insertCell(1);
        td1.innerHTML = '<strong>SSID Length</strong>';
        var td2 = tr.insertCell(2);
        td2.innerHTML = '<strong>Channel</strong>';
        var td3 = tr.insertCell(3);
        td3.innerHTML = '<strong>BSSID</strong>';
        var td4 = tr.insertCell(4);
        td4.innerHTML = '<strong>Security</strong>';
        var td5 = tr.insertCell(5);
        td5.innerHTML = '<strong>RSSI</strong>';
        var td6 = tr.insertCell(6);
        td6.innerHTML = '<strong>Action</strong>';

        var div = document.getElementById('aplist');
        div.innerHTML = "";
        div.appendChild(table);
    }

    function get_ap_list(vifname) {

        document.getElementById("loading").style.display="";

        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "apcli_scan")%>/' + vifname, null,
            function(x)
            {
                console.log(x)
                ap_list = eval(x.response);
                console.log(ap_list);
                create_ap_table(ap_list);
                document.getElementById("loading").style.display="none";
            }
        );
    }

    function toggle_apcli (show) {
        if (show) {
            document.getElementById('apcli_cfg').style.display = "";

            var a = document.getElementById('ApCliAuthMode')
            var to = a.options[a.options.selectedIndex].value
            if (to == "WPA2PSK"
             || to == "WPAPSK"
             || to == "WPAPSKWPA2PSK") {
                document.getElementById("apcli_wpa").style.display="";
                document.getElementById("apcli_wep").style.display="none";
            } else if (to == "WEP") {
                document.getElementById("apcli_wpa").style.display="none";
                document.getElementById("apcli_wep").style.display="";
            } else {
                document.getElementById("apcli_wpa").style.display="none";
                document.getElementById("apcli_wep").style.display="none";
            }
        }
        else {
            document.getElementById('apcli_cfg').style.display = "none";
            document.getElementById('apcli_wpa').style.display = "none";
            document.getElementById('apcli_wep').style.display = "none";
        }
    }

    function ApCliAuthMode_onchange (to) {
        if (to == "WPA2PSK"
         || to == "WPAPSK"
         || to == "WPAPSKWPA2PSK") {
            document.getElementById("apcli_wpa").style.display="";
            document.getElementById("apcli_wep").style.display="none";
        } else if (to == "OPEN" || to == "SHARED") {
            document.getElementById("apcli_wpa").style.display="none";
            document.getElementById("apcli_wep").style.display="";
        } else {
            document.getElementById("apcli_wpa").style.display="none";
            document.getElementById("apcli_wep").style.display="none";
        }
    }

    function choose_rootap(index) {
        document.getElementById("ApCliSsid").value=decode_ssid(ap_list[index].ssid);
        document.getElementById("Channel").value=ap_list[index].channel;
        document.getElementById("ApCliAuthMode").value=ap_list[index].authmode;
        if (ap_list[index].authmode == "WPA2PSK"
         || ap_list[index].authmode == "WPAPSK"
         || ap_list[index].authmode == "WPAPSKWPA2PSK") {
            document.getElementById("wpa_ApCliEncrypType").value=ap_list[index].encrypttype;
        } else if (ap_list[index].authmode == "OPEN" || ap_list[index].authmode == "SHARED") {
            if (ap_list[index].encrypttype == "NONE")
            {
                document.getElementById("ApCliAuthMode").value="Disable";
            }
            else
            {
                document.getElementById("wep_ApCliEncrypType").value=ap_list[index].encrypttype;
            }
        }
        ApCliAuthMode_onchange(document.getElementById("ApCliAuthMode").value);
        document.getElementById("ApCliWPAPSK").value="";
        document.getElementById("ApCliKey1Str").value="";
        location.href="#apcli_cfg_section";
    }

    function init_ezsetup (enable) {
        if (enable) {
            document.getElementById('ezsetup').style.display="";
        } else {
            document.getElementById('ezsetup').style.display="none";
        }
    }

    function GroupIDMode_onchange (seed) {
        if (seed == "1") {
            document.getElementById('ApCliEzGenGroupID').style.display="";
            document.getElementById('ApCliEzGroupID').style.display="none";
        } else {
            document.getElementById('ApCliEzGenGroupID').style.display="none";
            document.getElementById('ApCliEzGroupID').style.display="";
        }
    }

    window.onload = function() {
        ApCliAuthMode_onchange(document.getElementById("ApCliAuthMode").value);
        //init_ezsetup(<% if tostring(cfgs.ApCliEzEnable) == "1" then %>true<% else %>false<% end %>);
        //GroupIDMode_onchange(<% if cfgs.ApCliEzGenGroupID == "" then %>"0"<% else %>"1"<%end%>);
        <% if cfgs.ApCliEnable == "1" then %>
        toggle_apcli(true);
        <% else %>
        toggle_apcli(false);
        <% end %>
     }

    function decode_ssid(ssid)
    {
        ssid = ssid.replace(/&amp;/g, "&");
        ssid = ssid.replace(/&lt;/g, "<");
        ssid = ssid.replace(/&gt;/g, ">");
        ssid = ssid.replace(/&#34;/g, "\"");
        ssid = ssid.replace(/&#39;/g, "'");
        ssid = ssid.replace(/&nbsp;/g, " ");
        var patt = new RegExp(/&#(\d+);/);

        while (res = patt.exec(ssid))
        {
            ssid = ssid.replace("&#" + res[1] + ";", String.fromCharCode(res[1]));
        }
        return ssid;
    }

    //Interaction functions
    //========================================================================================
    function change_ap(ap_idx)
    {
        //console.log("selected ap_idx=", ap_idx);
        document.getElementById("pin_ap_ssid").value = ap_list[ap_idx]['ssid'];
        document.getElementById("root_ap_ssid").value = decode_ssid(ap_list[ap_idx]['ssid']);
        document.getElementById("pin_ap_bssid").value = ap_list[ap_idx]['bssid'];
    }

    function on_any_start()
    {
        show_waiting('ON');
    }

    function on_any_end()
    {
        show_waiting('OFF');
    }

    function on_rescan_start(mode, vifname)
    {
        on_any_start();
        clean_aplist_table();
        get_site_survey(vifname, mode);

        //show_waiting('OFF');
    }

    function on_rescan_end()
    {
        on_any_end();
    }

    function on_gen_pincode_start(vifname)
    {
        on_any_start();
        apcli_wps_gen_pincode(vifname);
    }

    function on_gen_pincode_end(vifname)
    {
        on_any_end();
        on_get_pincode_start(vifname);
    }

    function on_get_pincode_start(vifname)
    {
        on_any_start();
        apcli_wps_get_pincode(vifname);
    }

    function on_get_pincode_end()
    {
        on_any_end();
    }

    function on_apcli_wps_start(wsc_conf_mode, vifname, devname)
    {

        var pin_mode = document.getElementById("wps_mode_pin").checked;
        var pin_ap_ssid = document.getElementById("pin_ap_ssid");
        var encode_ssid = "";
        var alert_msg = "Please choose a Root AP in Site Survey result table below.\n" + 
                "if there is no WPS Root AP in the Site Survey result table,\n" +
                "please do scan again";

        //console.log("on_apcli_wps_start.pin_mode=" + pin_mode);
        //alert("on_apcli_wps_start.wsc_conf_mode=" + wsc_conf_mode + "pin_mode=" + pin_mode);
        if (wsc_conf_mode == "enr") {
            if (pin_mode){
                //alert("pin_ap_ssid.value.length=" + pin_ap_ssid.value.length);
                if (pin_ap_ssid.value.length ==  0) {
                    alert(alert_msg);
                    return;
                }
                encode_ssid = ssid_encode(pin_ap_ssid.value);
                if (encode_ssid == "") {
                    pin_ap_ssid.focus();
                    pin_ap_ssid.select();
                }
                else
                {
                    on_any_start();
                    apcli_do_enr_pin_wps(encode_ssid, vifname, devname);
                }
            } else {
                on_any_start();
                apcli_do_enr_pbc_wps(vifname, devname);
            }

        } else if (wsc_conf_mode == "reg4") {
            alert("This mode is not supported by driver.");
        } else {
            alert("Please choose one of WPS Role.");
        }
    }

    function on_apcli_wps_end()
    {
        on_any_end();
    }

    function on_apcli_wps_cancel_start(vifname, devname)
    {
        //console.log("on_apcli_wps_cancel <-------");
        on_any_start();
        apcli_show_wps_status_str("WSC: Cancelling");
        apcli_cancel_wps(vifname);
        setTimeout(function(){ apcli_get_wps_status(vifname, devname) }, wps_status_interval);
    }

    function on_apcli_wps_cancel_end()
    {
        on_any_end();
    }

    function display(mode, id)
    {
        document.getElementById(id).style.display = mode;
    }

    function on_wps_mode_change(wsc_mode)
    {
        wps_conf_mode = document.getElementById("wps_conf_mode").value;
        if (wsc_mode == "pbc") {
            //display("none", "div_wps_enrolle_pin"); //Future used for Reg.
            show_root_ap_info("OFF");
        }

        if (wsc_mode == "pin") {
            //if (wps_conf_mode == "reg4"))
                //display("table-row", "div_wps_enrolle_pin"); //Future used for Reg.
            if (wps_conf_mode == "enr")
                show_root_ap_info("ON");
        }
    }
    //Sub function
    //========================================================================================
    function wps_init(is_enabled)
    {
        if(is_enabled*1 > 0){
            show_apcli_wps(is_enabled);
        } else {
            show_apcli_wps(is_enabled);
        }
    }

    function show_apcli_wps(is_enabled)
    {
        if(is_enabled*1 >  0)
            display("table", "div_apsli_wps");
        else
            display("none", "div_apsli_wps");
    }

    function show_waiting(mode)
    {
        if(mode == "ON"){
            waiting_count += 1;
            document.getElementById("loadingbar").style.display="";
        } else {
            waiting_count = 0;
            document.getElementById("loadingbar").style.display="none";
        }
        console.log("waiting_count="+waiting_count);

    }

    function show_root_ap_info(mode)
    {
        if(mode == "ON"){
            document.getElementById("root_ap_table").style.display= "";
            document.getElementById("apcli_wps_section").style.display= "";
        } else {
            document.getElementById("root_ap_table").style.display= "none";
            document.getElementById("apcli_wps_section").style.display= "none";
        }
    }

    function clean_aplist_table()
    {
        var table = document.getElementById('aplist-site-survey');
        //console.log("clean_aplist_table.aplist len=" + table.rows.length);
        while(table.rows.length > 1)
            table.deleteRow(-1);
    }

    function insert_aplist_table()
    {
        var i, tr_row, td_cell;
        var tableid = document.getElementById('aplist-site-survey');

    //console.log("insert_aplist_table <-----");

        for (i = 0; ap_list[i] ; i++){
            tr_row = tableid.insertRow(-1);
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = "<input type='radio' name='ap_idx' value='" + i + "' onClick='change_ap(this.value)'>";
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['channel'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['ssid'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['ssid_len'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['bssid'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['security'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['rssi'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['mode'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['extch'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['nt'];
            td_cell = tr_row.insertCell(-1);
            td_cell.innerHTML = ap_list[i]['wps'];
        }
    }

    function ssid_encode_test(ssid)
    {
        var encode_str1 = encodeURIComponent(ssid);
        var encode_str2 = ssid_encode(ssid);
        alert("orig ssid="+ssid+"\n" + "encodeURIComponent(ssid)="+encode_str1 + "ssid_encode(ssid)="+encode_str2);
    }

    function ssid_encode(ssid)
    {
        var decoded_ssid = decode_ssid(ssid);
        var encode_ssid;
        if (ssid != "")
        {
            encode_ssid = encodeURIComponent(ssid).replace(/%[A-F\d]{2}/g, 'U');
            if (decoded_ssid.length > 32) {
                alert("The length of SSID exceeds 32 characters!");
                return "";
            }
        }

        return encodeURIComponent(ssid);
    }

    function ValidateChecksum(PIN)
    {
        var accum = 0;
        if (pincode.length == 4)
            return 1;
        if (pincode.length != 8)
            return 0;

        accum += 3 * (parseInt(pincode / 10000000) % 10);
        accum += 1 * (parseInt(pincode / 1000000) % 10);
        accum += 3 * (parseInt(pincode / 100000) % 10);
        accum += 1 * (parseInt(pincode / 10000) % 10);
        accum += 3 * (parseInt(pincode / 1000) % 10);
        accum += 1 * (parseInt(pincode / 100) % 10);
        accum += 3 * (parseInt(pincode / 10) % 10);
        accum += 1 * (parseInt(pincode / 1) % 10);

        return ((accum % 10) == 0);
    }

    function show_profile_info(wps_info)
    {
        var wps_info_textarea = document.getElementById("wps_info");
        //if ((!wps_info.enr_profile_idx) && (!wps_info.enr_SSID))
        //    return -1;

        wps_info_textarea.value += "\n[Profile" + wps_info.enr_profile_idx + "]";
        wps_info_textarea.value += "\nSSID:" + wps_info.enr_SSID;
        wps_info_textarea.value += "\nAuthMode:" + wps_info.enr_AuthMode;
        wps_info_textarea.value += "\tEncrypType:" + wps_info.enr_EncrypType;
        wps_info_textarea.value += "\nDefault Key Index:" + wps_info.enr_DefaultKeyID;
        if(wps_info.AuthMode == "WEP") //WPS1.0 Spec which is OBSOLESCENT on WPS2.0.
            wps_info_textarea.value += "\tKey(Hex value):" + wps_info.enr_KeyStr;
        else
            wps_info_textarea.value += "\tWPS Key(ASCII):" + wps_info.enr_WPAPSK;

        return 0;
    }

    function apcli_show_wps_status_str(show_str)
    {
        var wps_info_textarea = document.getElementById("wps_info");

        wps_info_textarea.value = show_str;
    }

    function apcli_update_wps_status(wps_info, show_str)
    {
        var wps_info_textarea = document.getElementById("wps_info");
        var ret = 0;

        if (wps_info.wps_result == "Failed") {
            wps_info_textarea.value = "WSC failed" + "\n" + "WSC failed";
            ret = -1;
        } else if (wps_info.wps_result == "Success") {
            wps_info_textarea.value = "WSC Success";
            if (wps_info.wps_port_secured == "YES") {
                //if (show_profile_info(wps_info) == 0)
                //    ret = 1;
                //else
                //    ret = 0;
                show_profile_info(wps_info);
                ret = 1;
            } else {
                wps_info_textarea.value += "\nConnecting";
                ret = 0;
            }
        } else {
            wps_info_textarea.value = "WSC:" + wps_info.wps_status;
            if ((wps_info.wps_status_code == 0) || (wps_info.wps_status_code == 1))
                ret = 1;
            else
                ret = 0;
        }

        if (ret != 0)
            on_apcli_wps_end();

        return ret;
    }

    //Ajax functions
    //========================================================================================
    function apcli_get_wps_status_cb(request, vifname, devname)
    {
        //console.log("apcli_get_wps_status_cb.responseText=" + request.responseText);
        var out = request;
        var res = JSON.parse(out);

        if (!res) {
            alert("apcli_get_wps_status NG! Please refresh this page.");
            return;
        }

        if (res.apcli_get_wps_status == "OK") {
            ret = apcli_update_wps_status(res);
            if (ret == 0)
                setTimeout(function(){ apcli_get_wps_status(vifname, devname) }, wps_status_interval);
        } else {
            alert("apcli_get_wps_status NG! Please refresh this page.\n" + res.apcli_get_wps_status);
        }
    }

    function apcli_get_wps_status(vifname, devname)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi", "apcli_get_wps_status")%>/' + vifname + "/" + devname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                apcli_get_wps_status_cb(x.response, vifname, devname);
            }
        );
    }

    function apcli_do_enr_pin_wps_cb(request, vifname, devname)
    {
        //console.log("apcli_do_enr_pin_wps_cb.responseText=" + request.responseText);
        var res = JSON.parse(request);

        if (res.apcli_do_enr_pin_wps == "OK")
            setTimeout(function(){ apcli_get_wps_status(vifname, devname) }, wps_status_interval);
        else
            alert("apcli_do_enr_pin_wps NG! Please refresh this page.\n" + res.apcli_do_enr_pin_wps);
    }

    function apcli_do_enr_pin_wps(pin_ap_ssid, vifname, devname)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "apcli_do_enr_pin_wps")%>/' + vifname + '/' + devname + '/' + pin_ap_ssid, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                apcli_do_enr_pin_wps_cb(x.response, vifname, devname);
            }
        );
    }

    function apcli_do_enr_pbc_wps_cb(request, vifname, devname)
    {
        //console.log("apcli_do_enr_pbc_wps_cb.responseText=" + request.responseText);
        var res = JSON.parse(request);

        if (res.apcli_do_enr_pbc_wps == "OK")
            setTimeout(function(){ apcli_get_wps_status(vifname, devname) }, wps_status_interval);
        else
            alert("apcli_do_enr_pbc_wps NG! Please refresh this page.\n" + res.apcli_do_enr_pbc_wps);
    }

    function apcli_do_enr_pbc_wps(vifname, devname)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "apcli_do_enr_pbc_wps")%>/' + vifname + '/' + devname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                apcli_do_enr_pbc_wps_cb(x.response, vifname, devname);
            }
        );
    }

    function apcli_cancel_wps_cb(request)
    {
        //console.log("apcli_cancel_wps_cb.responseText=" + request.responseText);
        var res = JSON.parse(request);

        if (res.apcli_cancel_wps != "OK") {
            alert("apcli_cancel_wps NG! Please refresh this page.\n" + res.apcli_cancel_wps);
        }

        on_apcli_wps_cancel_end();
    }

    function apcli_cancel_wps(vifname)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "apcli_cancel_wps")%>/' + vifname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                apcli_cancel_wps_cb(x.response);
            }
        );
    }

    function apcli_wps_gen_pincode_cb(request, vifname)
    {
        var res = JSON.parse(request);

        if (res.apcli_wps_gen_pincode == "OK")
            on_gen_pincode_end(vifname);
        else
            alert("apcli_wps_gen_pincode NG! Please refresh this page.\n" + res.apcli_wps_gen_pincode);
    }

    function apcli_wps_gen_pincode(vifname)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "apcli_wps_gen_pincode")%>/' + vifname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                apcli_wps_gen_pincode_cb(x.response, vifname);
            }
        );
    }

    function apcli_wps_get_pincode_cb(request)
    {
        var res = JSON.parse(request);
        //console.log("wpsConfigApplyCB.res=" + res + " ssid_index=" + ssid_index);

        //console.log("res.getpincode.length=" + res.getpincode.length)
        if (res.getpincode.length == 8)
            document.getElementById("pin_code").value = res.getpincode;
        else
            alert("GetPINCode NG! Please refresh this page.");

        on_get_pincode_end();
    }

    function apcli_wps_get_pincode(vifname)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "apcli_wps_get_pincode")%>/' + vifname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                apcli_wps_get_pincode_cb(x.response);
            }
        );
    }

    function filter_WPS_results(list, mode)
    {
        var mylist=[];
        if(mode == "WPS")
        {
            for (var i = 0; list[i] ; i++)
            {
                if(list[i]["wps"] == "YES")
                {
                    mylist.push(list[i]);
                }
            }
            return mylist;
        }
        else
        {
            return list;
        }
    }

    function get_site_survey_cb(request, mode)
    {
        //console.log("get_wps_site_survey_cb.responseText=" + request.responseText);
        //console.log("get_wps_site_survey_cb.args=" + mode);
        ap_list = JSON.parse(request);
        ap_list = filter_WPS_results(ap_list, mode);

        clean_aplist_table();
        insert_aplist_table();

        on_rescan_end();
    }

    function get_site_survey(vifname, mode)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "apcli_scan")%>/' + vifname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
                get_site_survey_cb(x.response, mode);
            }
        );
    }

    function WPSUpdateHTML(http_request, ssid_index)
    {
        var all_str = http_request.responseText;
        var field = all_str.split('\t');
        wpsconfigured = document.getElementById("WPSConfigured");
        //console.log("WPSUpdateHTML.wpsconfigured="+ field[0]);
        if(field[0] == "1" || field[0] == "0")
            wpsconfigured.innerHTML = "No";
        else if(field[0] == "2")
            wpsconfigured.innerHTML = "Yes";
        else
            wpsconfigured.innerHTML = "Unknown";

        wpsssid = document.getElementById("WPSSSID");
        wpsssid.innerHTML = field[1];
        if((dbdc_en == "1") && (dbdcb == "1")){
            if(field[1] != document.WPSConfig.ssidIndex.options[ssid_index].text){
                SSID[ssid_index] = field[1];
                document.WPSConfig.ssidIndex.options[ssid_index].text = field[1];
            }
        }

        wpsauthmode = document.getElementById("WPSAuthMode");
        wpsauthmode.innerHTML = field[2];

        wpsencryptype = document.getElementById("WPSEncryptype");
        wpsencryptype.innerHTML = field[3];

        wpsdefaultkeyindex = document.getElementById("WPSDefaultKeyIndex");
        wpsdefaultkeyindex.innerHTML = field[4];

        wpskeytype = document.getElementById("WPSKeyType");
        if(field[3] == "WEP"){
            wpskeytype.innerHTML = "WPS Key(Hex value)";
        }else
            wpskeytype.innerHTML = "WPS Key(ASCII)";

        wpswpakey = document.getElementById("WPSWPAKey");
        wpswpakey.innerHTML = field[5];

        wpsstatus = document.getElementById("WPSCurrentStatus");
        wpsstatus.innerHTML = field[6];

        if(field[7] == "-1")
            document.getElementById("WPSInfo").value = "WSC failed";
        else if(field[7] == "0"){
            document.getElementById("WPSInfo").value = "WSC:" + field[6];
        }else if(field[7] == "1")
            document.getElementById("WPSInfo").value = "WSC Success";
        wps_result = field[7];
    }

    function updateWPS()
    {
        XHR.get('<%=luci.dispatcher.build_url("admin",  "mtk",  "wifi",  "get_wps_info")%>/' + vifname, null, 
            function(x)
            {
                console.log(x);
                console.log(x.response);
            }
        );
    }

    // Orig HTML functions
    function SecurityModeSwitch()
    {
        var mysel = document.wireless_apcli.apcli_enc;
        mysel.options.length = 0;
        if (document.wireless_apcli.apcli_mode.options.selectedIndex == 0) {
            mysel.options[0] = new Option("WEP", "WEP");
            mysel.options[1] = new Option("None", "NONE");
        }
        else if (document.wireless_apcli.apcli_mode.options.selectedIndex == 1) {
            mysel.options[0] = new Option("WEP", "WEP");
        }
        else if (document.wireless_apcli.apcli_mode.options.selectedIndex == 2 ||
             document.wireless_apcli.apcli_mode.options.selectedIndex == 3) {
            mysel.options[0] = new Option("TKIP", "TKIP");
            mysel.options[1] = new Option("AES", "AES");
        }
    }

    function EncryptModeSwitch()
    {
        display("none", "div_apcli_default_key");
        document.wireless_apcli.apcli_default_key.disabled = true;
        display("none", "div_apcli_key1");
        document.wireless_apcli.apcli_key1.disabled = true;
        display("none", "div_apcli_key2");
        document.wireless_apcli.apcli_key2.disabled = true;
        display("none", "div_apcli_key3");
        document.wireless_apcli.apcli_key3.disabled = true;
        display("none", "div_apcli_key4");
        document.wireless_apcli.apcli_key4.disabled = true;
        display("none", "div_apcli_wpapsk");
        document.wireless_apcli.apcli_wpapsk.disabled = true;

        if (document.wireless_apcli.apcli_enc.value == "WEP") {
            display("table-row", "div_apcli_default_key");
            document.wireless_apcli.apcli_default_key.disabled = false;
            display("table-row", "div_apcli_key1");
            document.wireless_apcli.apcli_key1.disabled = false;
            display("table-row", "div_apcli_key2");
            document.wireless_apcli.apcli_key2.disabled = false;
            display("table-row", "div_apcli_key3");
            document.wireless_apcli.apcli_key3.disabled = false;
            display("table-row", "div_apcli_key4");
            document.wireless_apcli.apcli_key4.disabled = false;
        }
        else if (document.wireless_apcli.apcli_enc.value == "TKIP" ||
             document.wireless_apcli.apcli_enc.value == "AES") {
            display("table-row", "div_apcli_wpapsk");
            document.wireless_apcli.apcli_wpapsk.disabled = false;
        }
    }

    function close_additional_function()
    {
        display("none", "div_addition_action");
    }

    function CheckHex(str)
    {
        var len = str.length;

        for (var i = 0; i < str.length; i++) {
            if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') ||
                    (str.charAt(i) >= 'a' && str.charAt(i) <= 'f') ||
                    (str.charAt(i) >= 'A' && str.charAt(i) <= 'F')) {
                continue;
            }
            else
                return false;
        }
        return true;
    }

    function CheckInjection(str)
    {
        var len = str.length;
        for (var i = 0; i < str.length; i++) {
            if (str.charAt(i) == ';' || str.charAt(i) == ',' ||
                    str.charAt(i) == '\r' || str.charAt(i) == '\n') {
                return false;
            }
            else
                continue;
        }
        return true;
    }

    function CheckWep()
    {
        var defaultid = 1*document.wireless_apcli.apcli_default_key.value;
        if (document.wireless_apcli.apcli_enc.value == "WEP") {
            if (eval("document.wireless_apcli.apcli_key"+defaultid).value.length == 0) {
                alert('Please input wep key'+defaultid+'!');
                eval("document.wireless_apcli.apcli_key"+defaultid).focus();
                return false;
            }
        }

        if (document.wireless_apcli.apcli_key1type.options.selectedIndex == 0) {
            for (var i = 1; i < 5; i++) {
                var mykey = eval("document.wireless_apcli.apcli_key"+i);
                if (mykey.value.length != 0 && mykey.value.length != 5 && mykey.value.length != 13) {
                    alert('Please input 5 or 13 characters of wep key'+i);
                    mykey.focus();
                    return false;
                }
                if (!CheckInjection(mykey.value)) {
                    alert('Wep key'+i+' contains invalid characters!');
                    mykey.focus();
                    return false;
                }
            }
        }
        else {
            for (var i = 1; i < 5; i++) {
                var mykey = eval("document.wireless_apcli.apcli_key"+i);
                if (mykey.value.length != 0 && mykey.value.length != 10 && mykey.value.length != 26) {
                    alert('Please input 10 or 26 characters of wep key'+i);
                    mykey.focus();
                    return false;
                }
                if (!CheckHex(wireless_apcli.apcli_key1.value)) {
                    alert('Invalid Wep key'+i+' format!');
                    mykey.focus();
                    return false;
                }
            }
        }
    }

    function CheckWpa()
    {
        if (document.wireless_apcli.apcli_wpapsk.value.length < 8) {
            alert("Pass Phrase length should be larger than 8!");
            document.wireless_apcli.apcli_wpapsk.focus();
            return false;
        }
        if (!CheckInjection(document.wireless_apcli.apcli_wpapsk.value)) {
            alert('Invalid characters in Pass Phrase.');
            document.wireless_apcli.apcli_wpapsk.focus();
            return false;
        }
        return true;
    }

</script>

<%+footer%>
